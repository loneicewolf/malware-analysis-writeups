#Decrypts a selection of stack strings contained in RAZY (06/27/2020)
#@author kindredsec
#@category Analysis
#@keybinding 
#@menupath 
#@toolbar 

def decrypt(param_1, len):
	
	for _ in range(len, 0x1f+1):
		param_1.append(0)

	decryptedString = ""
	decryptedString += chr((param_1[0] ^ 0xa3) & 0xff )
	decryptedString += chr((param_1[1] ^ 0x54) & 0xff )
	decryptedString += chr(~param_1[2] & 0xff)
	decryptedString += chr((param_1[3] ^ 0x75) & 0xff )
	decryptedString += chr((param_1[4] ^ 0xe7) & 0xff )
	decryptedString += chr((param_1[5] ^ 0x44) & 0xff )
	decryptedString += chr((param_1[6] ^ 0x4b) & 0xff )
	decryptedString += chr((param_1[7] ^ 0x23) & 0xff )
	decryptedString += chr((param_1[8] ^ 0xbf) & 0xff )
	decryptedString += chr((param_1[9] ^ 0x45) & 0xff )
	decryptedString += chr((param_1[10] ^ 0x3b) & 0xff )
	decryptedString += chr((param_1[0xb] ^ 0x56) & 0xff )
	decryptedString += chr((param_1[0xc] ^ 0xf8) & 0xff )
	decryptedString += chr((param_1[0xd] ^ 0x98) & 0xff )
	decryptedString += chr((param_1[0xe] ^ 0x5b) & 0xff )
	decryptedString += chr((param_1[0xf] ^ 0xf4) & 0xff )
	decryptedString += chr((param_1[0x10] ^ 0xb5) & 0xff )
	decryptedString += chr((param_1[0x11] ^ 0x87) & 0xff )
	decryptedString += chr((param_1[0x12] ^ 0x7b) & 0xff )
	decryptedString += chr((param_1[0x13] ^ 0xf) & 0xff )
	decryptedString += chr((param_1[0x14] ^ 0xf4) & 0xff )
	decryptedString += chr((param_1[0x15] ^ 0x76) & 0xff )
	decryptedString += chr((param_1[0x16] ^ 0xb9) & 0xff )
	decryptedString += chr((param_1[0x17] ^ 0x34) & 0xff )
	decryptedString += chr((param_1[0x18] ^ 0xbf) & 0xff )
	decryptedString += chr((param_1[0x19] ^ 0x1e) & 0xff )
	decryptedString += chr((param_1[0x1a] ^ 0xe7) & 0xff )
	decryptedString += chr((param_1[0x1b] ^ 0x78) & 0xff )
	decryptedString += chr((param_1[0x1c] ^ 0x98) & 0xff )
	decryptedString += chr((param_1[0x1d] ^ 0xe9) & 0xff )
	decryptedString += chr((param_1[0x1e] ^ 0x6f) & 0xff )
	decryptedString += chr((param_1[0x1f] ^ 0xb4) & 0xff )
	
	decryptedStringFinal = ""
	i = 0
	while ( ord(decryptedString[i]) != 0x00 ):
		decryptedStringFinal += decryptedString[i]
		i += 1

	return decryptedStringFinal
	


def getSelection():

	stackStringArr = []
	selection = currentSelection
	try:
		addresses = selection.getAddresses(True)
	except AttributeError:
		popup("No selection specified. Please highlight stack string block in the listing view.")

	for address in addresses:
		instruction = getInstructionAt(address)
		if instruction:
			pushedValueStr = str(instruction).split(',')[1]
			try:
				stackStringArr.append(int(pushedValueStr, 16))
			except ValueError:
				print("[!] One of the pushed strings is a register, which cannot be computed; final string may be slightly off . . .")

	return stackStringArr

stackChars = getSelection()
minAddress = currentSelection.getMinAddress()
maxAddress = currentSelection.getMaxAddress()
decryptedString = decrypt(stackChars, len(stackChars))
outString = "[" + str(minAddress) + " - " + str(maxAddress) + "] = " + str(decryptedString)
print(outString)
listing = currentProgram.getListing()
codeUnit = listing.getCodeUnitAt(minAddress)
codeUnit.setComment(codeUnit.PRE_COMMENT, outString)

import argparse
from http.server import HTTPServer, BaseHTTPRequestHandler
import re
import sys
import ssl
import os
import time
import buerBeaconDecrypt
import base64

C_RED = "\033[1;31m"
C_RESET = "\033[0m"
C_YELLOW = "\033[1;33m"
C_BLUE = "\033[1;34m"
C_GREEN = "\033[1;32m"
C_WHITE = "\033[1;37m"

class Serv(BaseHTTPRequestHandler):
    
    def do_GET(self):
        print(f"Received a GET request to: {self.path}")
        print()
        print()
        
    def do_POST(self):
    
        print(f"Recieved a POST request to: {self.path}")
        print()
        print("Post Data (Decrypted):")
        content_length = int(self.headers['Content-Length'])
        body = self.rfile.read(content_length)
        self.send_response(200)
        self.end_headers()  
        post_data = body.decode('utf-8')
        hexString = parseOutBase64(post_data)
        decrypted = buerBeaconDecrypt.getPlainText(DECRYPT_KEY, hexString)
        print(decrypted)
        print()
        print()
        
        


def parseOutBase64(data):

    baseString = ""
    components = data.split('&')
    components = components[:-2]
    for i in components:
        base = i.split("=")[1]
        baseString += base

    t = 0 
    while t <= 2: 
        try:
            hexString = base64.b64decode(bytes(baseString, 'utf-8'))
            break
        except:
            baseString += "="
            t += 1

    return hexString.decode('utf-8')


LHOST = "0.0.0.0"
LPORT = 443
DECRYPT_KEY = "TKFGQGLMEW"
                
httpd = HTTPServer((LHOST, LPORT), Serv)
os.system("openssl req -new -x509 -keyout server.pem -out server.pem -days 10 -nodes -batch 2>/dev/null")
time.sleep(2)
httpd.socket = ssl.wrap_socket(httpd.socket, certfile='./server.pem', server_side=True)

print("Server Running  . . .")
httpd.serve_forever()
                
            
            
